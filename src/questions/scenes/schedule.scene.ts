import { Markup, Scenes } from 'telegraf';
import { UseFilters } from '@nestjs/common';
import { Scene, SceneEnter, On, Ctx, Action, Message } from 'nestjs-telegraf';
import { Context } from 'src/interfaces/context.interface';
import { SCENE_SETTINGS } from 'src/common/config/scene';
import { TelegrafExceptionFilter } from 'src/common/filters/telegraf-exception.filter';

@Scene('question_schedule', SCENE_SETTINGS)
@UseFilters(TelegrafExceptionFilter)
export class QScheduleScene {
  @SceneEnter()
  onSceneEnter(ctx: Context) {
    ctx.replyWithHTML(
      `üóìÔ∏è –ö–æ–ª–∏ –í–∞–º –±—É–ª–æ –± –∑—Ä—É—á–Ω–æ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ <b>–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—Ä–æ–±–Ω–µ –∑–∞–Ω—è—Ç—Ç—è</b> –∑ –Ω–∞—à–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º?\n\n<i>–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ–Ω—å —Ç–∞ –ø—Ä–∏–±–ª–∏–∑–Ω—ñ –≥–æ–¥–∏–Ω–∏.</i>`,
    );
  }

  @On('text')
  async onText(@Ctx() ctx: Context, @Message('text') date: string) {
    if (date && date.length < 6) {
      ctx.reply(
        `‚ùå –í–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ`,
      );

      return;
    }

    ctx.scene.enter('question_contact', { ...ctx.scene.state, date });
  }

  @On('message')
  async onMessage(ctx: Context): Promise<void> {
    ctx.scene.reenter();
  }
}
